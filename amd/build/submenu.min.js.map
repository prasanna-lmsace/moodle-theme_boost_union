{"version":3,"file":"submenu.min.js","sources":["../src/submenu.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Theme Boost Union - Initializes and handles events of the sub menus in smart menu.\n *\n * @module     theme_boost_union/submenu\n * @copyright  2023 bdecent GmbH <https://bdecent.de>\n * @copyright  based on code from core/usermenu by Mihail Geshoski\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport {space, enter} from 'core/key_codes';\n\n/**\n * Smart sub menu constants.\n */\nconst selectors = {\n    smartMenu: '.theme-boost-union-smartmenu-carousel',\n    smartMenuCarousel: '#smartmenu-carousel',\n    smartMenuCarouselItem: '#smartmenu-carousel .carousel-item',\n    smartMenuCarouselItemActive: '#smartmenu-carousel .carousel-item.active',\n    smartMenuCarouselNavigationLink: '#smartmenu-carousel .carousel-navigation-link',\n};\n\n/**\n * Register event listeners.\n */\nconst registerEventListeners = (smartMenu) => {\n\n    var smartMenuDropDown = smartMenu.querySelector('.dropdown-menu');\n    var observer = new MutationObserver(function() {\n        if (!smartMenuDropDown.classList.contains('show')) {\n            return;\n        }\n        const activeCarouselItem = smartMenu.querySelector(selectors.smartMenuCarouselItemActive)\n        // Set the focus on the active carousel item.\n        activeCarouselItem.focus();\n\n        var element = smartMenu.querySelector(selectors.smartMenuCarousel);\n        if (element !== undefined || element.length !== null) {\n            // Resize all non-active carousel items to match the height and width of the current active (main)\n            // carousel item to avoid sizing inconsistencies. This has to be done once the dropdown menu is fully\n            // displayed ('shown.bs.dropdown') as the offsetWidth and offsetHeight cannot be obtained when the\n            // element is hidden.\n\n            element.style.minWidth = element.offsetWidth + 'px';\n            element.style.minHeight = element.offsetHeight + 'px';\n        }\n    }, true);\n    observer.observe(smartMenuDropDown, { attributes: true, childList: true });\n\n    // Handle click events in the smart menu.\n    smartMenu.addEventListener('click', (e) => {\n\n        // Handle click event on the carousel navigation (control) links in the smart menu.\n        if (e.target.matches(selectors.smartMenuCarouselNavigationLink)) {\n            carouselManagement(e);\n        }\n\n    }, true);\n\n    smartMenu.addEventListener('keydown', e => {\n        // Handle keydown event on the carousel navigation (control) links in the smart menu.\n        if ((e.keyCode === space ||\n            e.keyCode === enter) &&\n            e.target.matches(selectors.smartMenuCarouselNavigationLink)) {\n            e.preventDefault();\n            carouselManagement(e);\n        }\n    }, true);\n\n    /**\n     * We do the same actions here even if the caller was a click or button press.\n     *\n     * @param {Event} e The triggering element and key presses etc.\n     */\n    const carouselManagement = e => {\n\n        // By default the smart menu dropdown element closes on a click event. This behaviour is not desirable\n        // as we need to be able to navigate through the carousel items (submenus of the smart menu) within the\n        // smart menu. Therefore, we need to prevent the propagation of this event and then manually call the\n        // carousel transition.\n        e.stopPropagation();\n        // The id of the targeted carousel item.\n        const targetedCarouselItemId = e.target.dataset.carouselTargetId;\n        const targetedCarouselItem = smartMenu.querySelector('#' + targetedCarouselItemId);\n        // Get the position (index) of the targeted carousel item within the parent container element.\n        const index = Array.from(targetedCarouselItem.parentNode.children).indexOf(targetedCarouselItem);\n        // Navigate to the targeted carousel item.\n        $(smartMenu.querySelector(selectors.smartMenuCarousel)).carousel(index);\n\n    };\n\n    // Handle the 'hide.bs.dropdown' event (Fired when the dropdown menu is being closed).\n    $(selectors.smartMenu).on('hide.bs.dropdown', () => {\n        // Reset the state once the smart menu dropdown is closed and return back to the first (main) carousel item\n        // if necessary.\n        $(smartMenu.querySelector(selectors.smartMenuCarousel)).carousel(0);\n    });\n\n    // Handle the 'slid.bs.carousel' event (Fired when the carousel has completed its slide transition).\n    $(selectors.smartMenuCarousel).on('slid.bs.carousel', () => {\n        const activeCarouselItem = smartMenu.querySelector(selectors.smartMenuCarouselItemActive);\n        // Set the focus on the newly activated carousel item.\n        activeCarouselItem.focus();\n    });\n};\n\n/**\n * Initialize the sub menus.\n */\nconst init = () => {\n    const smartMenus = document.querySelectorAll(selectors.smartMenu);\n    if (smartMenus !== undefined && smartMenus.length !== null) {\n        smartMenus.forEach((e) => registerEventListeners(e));\n    }\n};\n\nexport default {\n    init: init,\n};\n"],"names":["selectors","init","smartMenus","document","querySelectorAll","undefined","length","forEach","e","smartMenu","smartMenuDropDown","querySelector","MutationObserver","classList","contains","focus","element","style","minWidth","offsetWidth","minHeight","offsetHeight","observe","attributes","childList","addEventListener","target","matches","carouselManagement","keyCode","space","enter","preventDefault","stopPropagation","targetedCarouselItemId","dataset","carouselTargetId","targetedCarouselItem","index","Array","from","parentNode","children","indexOf","carousel","on","registerEventListeners"],"mappings":";;;;;;;;mJA8BMA,oBACS,wCADTA,4BAEiB,sBAFjBA,sCAI2B,4CAJ3BA,0CAK+B,6DAiGtB,CACXC,KARS,WACHC,WAAaC,SAASC,iBAAiBJ,0BAC1BK,IAAfH,YAAkD,OAAtBA,WAAWI,QACvCJ,WAAWK,SAASC,GAvFIC,CAAAA,gBAExBC,kBAAoBD,UAAUE,cAAc,kBACjC,IAAIC,kBAAiB,cAC3BF,kBAAkBG,UAAUC,SAAS,SAGfL,UAAUE,cAAcX,uCAEhCe,YAEfC,QAAUP,UAAUE,cAAcX,kCACtBK,IAAZW,SAA4C,OAAnBA,QAAQV,SAMjCU,QAAQC,MAAMC,SAAWF,QAAQG,YAAc,KAC/CH,QAAQC,MAAMG,UAAYJ,QAAQK,aAAe,UAEtD,GACMC,QAAQZ,kBAAmB,CAAEa,YAAY,EAAMC,WAAW,IAGnEf,UAAUgB,iBAAiB,SAAUjB,IAG7BA,EAAEkB,OAAOC,QAAQ3B,4CACjB4B,mBAAmBpB,MAGxB,GAEHC,UAAUgB,iBAAiB,WAAWjB,IAE7BA,EAAEqB,UAAYC,kBACftB,EAAEqB,UAAYE,mBACdvB,EAAEkB,OAAOC,QAAQ3B,6CACjBQ,EAAEwB,iBACFJ,mBAAmBpB,OAExB,SAOGoB,mBAAqBpB,IAMvBA,EAAEyB,wBAEIC,uBAAyB1B,EAAEkB,OAAOS,QAAQC,iBAC1CC,qBAAuB5B,UAAUE,cAAc,IAAMuB,wBAErDI,MAAQC,MAAMC,KAAKH,qBAAqBI,WAAWC,UAAUC,QAAQN,0CAEzE5B,UAAUE,cAAcX,8BAA8B4C,SAASN,4BAKnEtC,qBAAqB6C,GAAG,oBAAoB,yBAGxCpC,UAAUE,cAAcX,8BAA8B4C,SAAS,0BAInE5C,6BAA6B6C,GAAG,oBAAoB,KACvBpC,UAAUE,cAAcX,uCAEhCe,YAUO+B,CAAuBtC"}