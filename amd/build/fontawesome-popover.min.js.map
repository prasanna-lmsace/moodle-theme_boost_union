{"version":3,"file":"fontawesome-popover.min.js","sources":["../src/fontawesome-popover.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Theme Boost Union - JS code which shows all fontawesome icons in a popover.\r\n *\r\n * @module     theme_boost_union/fontawesome-popover\r\n * @copyright  2023 bdecent GmbH <https://bdecent.de>\r\n * @copyright  based on code from theme_boost\\footer-popover by Bas Brands.\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'theme_boost/popover', 'core/fragment'], function($, popover, Fragment) {\r\n\r\n    const SELECTORS = {\r\n        PICKERCONTAINER: '.fontawesome-iconpicker-popover',\r\n        PICKERCONTENT: '[data-region=\"icons-list\"]',\r\n    };\r\n\r\n    var contextID;\r\n\r\n    let pickerIsShown = false;\r\n\r\n    var SELECTBOX;\r\n\r\n    /**\r\n     * Get the icon list for popover.\r\n     *\r\n     * @returns {String} HTML string\r\n     * @private\r\n     */\r\n    const getIconList = () => {\r\n        return Fragment.loadFragment('theme_boost_union', 'icons_list', contextID, {});\r\n    };\r\n\r\n    /**\r\n     * Filter the icons in the list with values which the user entered in the search input.\r\n     * Given input will contain the text in both data-value and data-label.\r\n     * Ex. \"core:t\\document\" is data-value and \"fa-document\" is data-label.\r\n     *\r\n     * @param {Element} target\r\n     */\r\n    const filterIcons = (target) => {\r\n        var filter = target.value.toLowerCase();\r\n        SELECTBOX.value = filter || 0;\r\n        var ul = document.querySelector('.fontawesome-iconpicker-popover ul.fontawesome-icon-suggestions');\r\n        if (ul === undefined || ul === null) {\r\n            return;\r\n        }\r\n        var li = ul.querySelectorAll('li');\r\n\r\n        for (var i = 0; i < li.length; i++) {\r\n            var value = li[i].getAttribute('data-value');\r\n            var label = li[i].getAttribute('data-label');\r\n            if (!value.toLowerCase().includes(filter) && !label.toLowerCase().includes(filter)) {\r\n                li[i].style.display = \"none\";\r\n            } else {\r\n                li[i].style.display = \"inline-block\";\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates input element and append the element into the target element's parent node.\r\n     * User is able to search icons using this input field.\r\n     *\r\n     * @param {String} target Element Selector.\r\n     */\r\n    const createElements = (target) => {\r\n\r\n        var input = document.createElement('input');\r\n        input.setAttribute('type', 'text');\r\n        input.classList.add('fontawesome-autocomplete');\r\n        input.classList.add('form-control');\r\n        input.setAttribute('name', 'iconsearch');\r\n\r\n        if (SELECTBOX.value != '') {\r\n            input.value = SELECTBOX.querySelector('option[selected]') !== null\r\n                ? SELECTBOX.querySelector('option[selected]').text : '';\r\n        }\r\n\r\n        var wrapper = document.createElement('div');\r\n        wrapper.classList.add(\"fontawesome-picker-container\");\r\n        wrapper.append(input);\r\n\r\n        document.querySelector(target).style.display = 'none';\r\n        document.querySelector(target).parentNode.append(wrapper);\r\n    };\r\n\r\n    /**\r\n     * Update the target with fontawesome iconpicker.\r\n     *\r\n     * Create picker input field for search icons insert to DOM, fetch the icons list and setup the popover with icons content.\r\n     * Display the popover when the icon search input field is focused or clicked. This way user can view the list of icons and\r\n     * search icons. When the icon is selected, same icon in the select element will be selected.\r\n     *\r\n     * @param {String} target Element Selector.\r\n     */\r\n    const iconPicker = (target) => {\r\n\r\n        SELECTBOX = document.querySelector(target);\r\n\r\n        if (SELECTBOX === undefined || SELECTBOX === null) {\r\n            return;\r\n        }\r\n\r\n        // Create input element and insert for search icons and hide the current target select box.\r\n        createElements(target);\r\n\r\n        // Parent of the target element.\r\n        var selectBoxParent = document.querySelector(target).parentNode;\r\n\r\n        // Input element for search icons, appended in createElements method.\r\n        const pickerInput = selectBoxParent.querySelector(\"input.fontawesome-autocomplete\");\r\n\r\n        // Check the search input created and inserted in DOM.\r\n        if (pickerInput === undefined || pickerInput === null) {\r\n            setTimeout(() => iconPicker(target), 1000);\r\n            return;\r\n        }\r\n\r\n        // Fetch the icons list and setup popover with icons list.\r\n        // eslint-disable-next-line promise/valid-params\r\n        getIconList().then(function(html) {\r\n\r\n            $(pickerInput).popover({\r\n                content: html,\r\n                html: true,\r\n                placement: 'bottom',\r\n                customClass: 'fontawesome-picker',\r\n                trigger: 'click',\r\n                sanitize: false\r\n            });\r\n\r\n            // Event observer when the popover is inserted in DOM, create event listner for each icon in icons list.\r\n            // Icon is clicked, set the icon data-value as value for select box.\r\n            // Set the icon label to value of autocomplete picker.\r\n            $(pickerInput).on('inserted.bs.popover', function() {\r\n                var ul = document.querySelector('.fontawesome-iconpicker-popover ul.fontawesome-icon-suggestions');\r\n                ul.querySelectorAll('li').forEach((li) => {\r\n                    li.addEventListener('click', (e) => {\r\n                        var target = e.target.closest('li');\r\n                        var value = target.getAttribute('data-value');\r\n                        var label = target.getAttribute('data-label');\r\n                        pickerInput.value = label;\r\n                        SELECTBOX.value = value || 0;\r\n                        $(pickerInput).popover('hide');\r\n                    });\r\n                });\r\n            });\r\n            return;\r\n        }).catch();\r\n\r\n        document.addEventListener('click', e => {\r\n            if (pickerIsShown && !e.target.closest(SELECTORS.PICKERCONTAINER)) {\r\n                $(pickerInput).popover('hide');\r\n            }\r\n        },\r\n        true);\r\n\r\n        document.addEventListener('keydown', e => {\r\n            if (pickerIsShown && e.key === 'Escape') {\r\n                $(pickerInput).popover('hide');\r\n                pickerInput.focus();\r\n            }\r\n        });\r\n\r\n        document.addEventListener('focus', e => {\r\n            if (pickerIsShown && !e.target.closest(SELECTORS.PICKERCONTAINER)) {\r\n                $(pickerInput).popover('hide');\r\n            }\r\n        },\r\n        true);\r\n\r\n        $(pickerInput).on('shown.bs.popover', () => {\r\n            pickerIsShown = true;\r\n            // Add class to selected icon, helps to differentiate.\r\n            if (pickerInput.value != '') {\r\n                var iconSuggestion = document.querySelector('.fontawesome-iconpicker-popover ul.fontawesome-icon-suggestions');\r\n                if (iconSuggestion.querySelector('li[data-label=\"' + pickerInput.value + '\"]') !== null) {\r\n                    // Remove selected class.\r\n                    iconSuggestion.querySelectorAll('li').forEach((li) =>\r\n                            li.classList.remove('selected'));\r\n                    // Assign selected class for new.\r\n                    iconSuggestion.querySelector('li[data-label=\"' + pickerInput.value + '\"]').classList.add('selected');\r\n                }\r\n            }\r\n        });\r\n\r\n        $(pickerInput).on('hide.bs.popover', () => {\r\n            pickerIsShown = false;\r\n        });\r\n\r\n        pickerInput.addEventListener('keyup', function(e) {\r\n            filterIcons(e.target);\r\n        });\r\n\r\n    };\r\n\r\n    return {\r\n        init: (target, contextid) => {\r\n            contextID = contextid;\r\n            iconPicker(target);\r\n        }\r\n\r\n    };\r\n});\r\n"],"names":["define","$","popover","Fragment","SELECTORS","contextID","pickerIsShown","SELECTBOX","iconPicker","target","document","querySelector","input","createElement","setAttribute","classList","add","value","text","wrapper","append","style","display","parentNode","createElements","pickerInput","loadFragment","then","html","content","placement","customClass","trigger","sanitize","on","querySelectorAll","forEach","li","addEventListener","e","closest","getAttribute","label","catch","key","focus","iconSuggestion","remove","filter","toLowerCase","ul","i","length","includes","filterIcons","setTimeout","init","contextid"],"mappings":"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"}